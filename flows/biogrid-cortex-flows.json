[
  {
    "id": "78eb3f22.8714c",
    "type": "mqtt-broker",
    "z": "8817af12.77e85",
    "broker": "cortex_mosquitto_1",
    "port": "1883",
    "clientid": "Node-RED",
    "usetls": false,
    "verifyservercert": true,
    "compatmode": true,
    "keepalive": "15",
    "cleansession": true,
    "willTopic": "connections/lost",
    "willQos": "0",
    "willRetain": "false",
    "willPayload": "Node-RED connection lost",
    "birthTopic": "connections/birth",
    "birthQos": "0",
    "birthRetain": "false",
    "birthPayload": "Node-RED connected"
  },
  {
    "id": "52c57e6f.ad3a8",
    "type": "mongodb",
    "z": "8817af12.77e85",
    "hostname": "cortex_mongo_1",
    "port": "27017",
    "db": "biogrid",
    "name": ""
  },
  {
    "id": "5a5feb7d.a5a014",
    "type": "inject",
    "z": "8817af12.77e85",
    "name": "RH",
    "topic": "rh",
    "payload": "{\"id\":\"81772309-6FFF-4886-9977-DA15AD34C263\"}",
    "payloadType": "json",
    "repeat": "1",
    "crontab": "",
    "once": false,
    "x": 108,
    "y": 215,
    "wires": [
      [
        "c04918d7.3fb6e8"
      ]
    ]
  },
  {
    "id": "21cdde94.de3222",
    "type": "function",
    "z": "8817af12.77e85",
    "name": "prepare update",
    "func": "var sensorType = msg.topic;\nvar sensorId = msg.payload.id;\nvar value = msg.payload.value;\n\nnode.log(\"ID:\" + sensorId + \" Type: \" + sensorType + \" value: \" + value);\n\nvar ts = new Date();\n\nmsg.payload = {}\nvar hours = ts.getHours();\nvar minutes = ts.getMinutes(); \nvar seconds = ts.getSeconds();\nvar day = ts.toISOString().substring(0, 10);\n\n// Update the document for the current day (or create new)\n// See https://github.com/node-red/node-red-nodes/blob/master/storage/mongodb/66-mongodb.js\nvar query = {\n    sensor_id: sensorId,\n    day: day\n};\nvar key = \"values.\" + hours + \".\" + minutes + \".\" + seconds;\nvar update = {}\nupdate['$set'] = {}\nupdate['$set'][key] = value\n\nmsg.query = query\nmsg.payload = update\nmsg.collection = sensorType\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 503,
    "y": 251,
    "wires": [
      [
        "13671e11.ec98e2",
        "bc6a782f.439588"
      ]
    ]
  },
  {
    "id": "36b28496.c94d7c",
    "type": "inject",
    "z": "8817af12.77e85",
    "name": "CO2",
    "topic": "co2",
    "payload": "{\"id\":\"F5DF0E1C-5BE1-4C49-B22F-B5542564BB9A\"}",
    "payloadType": "json",
    "repeat": "5",
    "crontab": "",
    "once": false,
    "x": 107,
    "y": 289,
    "wires": [
      [
        "7b58de90.84a72"
      ]
    ]
  },
  {
    "id": "13671e11.ec98e2",
    "type": "debug",
    "z": "8817af12.77e85",
    "name": "Debug out",
    "active": false,
    "console": "false",
    "complete": "payload",
    "x": 704,
    "y": 187,
    "wires": []
  },
  {
    "id": "c04918d7.3fb6e8",
    "type": "function",
    "z": "8817af12.77e85",
    "name": "1h sine wave",
    "func": "var v = (new Date()).getTime();\nmsg.payload = { id: msg.payload.id, value: 1024 * (Math.sin(v / 3600000) + 1) };\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 270,
    "y": 212,
    "wires": [
      [
        "21cdde94.de3222"
      ]
    ]
  },
  {
    "id": "7b58de90.84a72",
    "type": "function",
    "z": "8817af12.77e85",
    "name": "24h sine wave",
    "func": "var v = (new Date()).getTime();\nmsg.payload = { id: msg.payload.id, value: 1024 * (Math.cos(v / (24 * 3600000)) + 1) };\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 274,
    "y": 290,
    "wires": [
      [
        "21cdde94.de3222"
      ]
    ]
  },
  {
    "id": "bc6a782f.439588",
    "type": "mongodb out",
    "z": "8817af12.77e85",
    "mongodb": "52c57e6f.ad3a8",
    "name": "MongoDB timeseries updater",
    "collection": "",
    "payonly": false,
    "upsert": true,
    "multi": true,
    "operation": "update",
    "x": 689,
    "y": 345,
    "wires": []
  },
  {
    "id": "12743170.ed8bcf",
    "type": "comment",
    "z": "8817af12.77e85",
    "name": "README",
    "info": "This flow creates a constant stream of simulated sensor data. \n\n## RH\nRH is simulated relative humidity sensor that generates a sine wave pattern over a 1h time period. It generates new values every second.\n\n## CO2\nCO2 is simulated CO2-sensor. It generates a sine wave pattern over a 24h time period. It generates new values every 5 seconds.\n\n## MongoDB\nThe sensor data readings are stored in a mongo database named \"biogrid\". Each sensor type has its own collection.",
    "x": 420,
    "y": 45,
    "wires": []
  },
  {
    "id": "43cc3d88.bc33c4",
    "type": "mqtt in",
    "z": "8817af12.77e85",
    "name": "sensors",
    "topic": "/sensor/#",
    "broker": "78eb3f22.8714c",
    "x": 84.5,
    "y": 435,
    "wires": [
      [
        "bb9789d1.446878"
      ]
    ]
  },
  {
    "id": "bb9789d1.446878",
    "type": "change",
    "z": "8817af12.77e85",
    "name": "change topic",
    "rules": [
      {
        "t": "change",
        "p": "topic",
        "pt": "msg",
        "from": "/sensor/",
        "fromt": "str",
        "to": "",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 250.5,
    "y": 437,
    "wires": [
      [
        "21cdde94.de3222"
      ]
    ]
  },
  {
    "id": "204cc304.dfb33c",
    "type": "comment",
    "z": "8817af12.77e85",
    "name": "Real sensor data",
    "info": "Real sensors will publish data to an MQTT topic named /sensor/type, for example /sensor/ph for a pH-sensor. \nThe payload should contain two values: id, the sensor guid and value, the sensor reading value.",
    "x": 110.5,
    "y": 376,
    "wires": []
  },
  {
    "id": "79cbeabd.863414",
    "type": "comment",
    "z": "8817af12.77e85",
    "name": "Simulated sensor data",
    "info": "",
    "x": 129,
    "y": 149,
    "wires": []
  }
]
